= CodeAbbey Neumman's Random Generator

En este ejercicio se crean números pseudo-aleatorios, primero se escogen
valores con 4 dígitos (0001, 9999), se eleva al cuadrado consiguiendo un numero
de 8 dígitos, agregando ceros a la izquierda de ser necesario, se truncan los 2
últimos y los 2 primeros dígitos, este nuevo valor es el próximo en la secuencia.

Ejemplo:

5761                      - let it be the first number
5761 * 5761 = 33189121    - raised to power 2
33(1891)21 => 1891        - truncate to get the middle

1891                      - it is the second number in the sequence
1891 * 1891 = 3575881    - raised to power 2 (add leading zero to get 8 digits)
03(5758)81 => 5758         - truncate to get the middle

5758                      - it is the third number in the sequence (and so on...)

Estos números tarde o temprano entran en un bucle:

0001 -> 0000 -> 0000                   - came to loop after 2 iterations
4100 -> 8100 -> 6100 -> 2100 -> 4100   - came to loop after 4 iterations

En el primer dato de entrada te darán el número de casos de prueba, en la
siguiente línea se dan los valores iniciales de cada caso, separados por
espacios. Se debe responder el número de iteraciones necesarias en donde
el algoritmo entra en un bucle.

Ejemplo:

    input data:
      3
      0001 4100 5761

    answer
      2 4 88

= Solución

Se recorre la lista de elementos, en el primer ciclo de cada elemento se agrega
el mismo directamente en un arreglo en donde se verificara si ha ocurrido
un ciclo.

[source,python]
----
list.append(num)
----

Luego se realizan las iteraciones para calcular los números pseudo-aleatorios,
revisando si se repiten.

[source,python]
----
while(var):
  num=getMiddle(int(num)**2)
  var = repeat(list,num)
----

Para el algoritmo de truncar los valores se debe verificar si el largo del
elemento es igual a 8, y si no se deben agregar tantos ceros a la izquierda
como sean necesarios para luego retornar el número truncado.

[source,python]
----
def getMiddle(num):
	if len('%d'%num)==8:s
		l = len('%d'%num)
		var = (l -4)/2
		num = '%d'%num
		return num[var:l-var]
	elif len('%d'%num)<8:
		zeroes = ''
		for i in range(8-len('%d'%num)):
			zeroes = zeroes +'0'
		num=zeroes+'%d'%num
		l = len(num)
		var = (l -4)/2
		return num[var:l-var]
----

Para verificar si se repite el número que se acaba de crear, se recorre la
lista auxiliar verificando número por número si se ha repetido.

[source,python]
----
def repeat(list,num):
	if len(list)>0 :
		for i in list:
			if i==num:
				return False
	return True
----
