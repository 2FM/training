= Bubble in Array

Este algoritmo da una idea de cómo se ordena, mediante método de ordenamiento
por burbuja. Dado un arreglo de enteros debemos iterar entre todos los pares de
elementos vecinos, comenzando por el primero, e intercambiar miembros de cada
par si el primer elemento es mayor que el segundo, por ejemplo considere el
arreglo de los elementos 1 4 3 2 6 5:

(1  4) 3  2  6  5  - pass
1 (4  3) 2  6  5  - swap
1  3 (4  2) 6  5  - swap
1  3  2 (4  6) 5  - pass
1  3  2  4 (6  5) - swap
1  3  2  4  5  6  - end

La data de entrada es la secuencia de elementos del arreglo todos con signos
positivos, señalando con un -1 el final del arreglo.

La respuesta debe ser 2 valores, el número de cambios realizados en el arreglo
al finalizar el proceso y el checksum del arreglo al finalizar.

Ejemplo:

		input data:
				1 4 3 2 6 5 -1

		answer:
				3 5242536

= Solución

Se recorre el arreglo de números, validando que el i-esimo+1 elemento no
sobrepase el número total de elementos. Luego, si donde estamos parados es
mayor que el número siguiente entonces se realiza el cambio y se lleva la
cuenta de cuantos cambios se han hecho.

[source,python]
----
for i in range(len(values)):
	if i+1 < len(values):
		if int(values[i]) > int(values[i+1]):
			#swap
			count = count +1
			values[i],values[i+1] = values[i+1],values[i]
----

Luego de finalizado se calcula el checksum como en el ejercicio #17 de CodeAbbey

[source,python]
----
def checksum(list):
	result = 0
	for i in values:
		result = ((result + int(i))*113)%10000007
	return result
----
