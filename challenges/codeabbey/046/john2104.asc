= CodeAbby Tic Tac Toe

Se tiene una matriz de 3x3 de la siguiente manera

1 | 2 | 3
---+---+---
4 | 5 | 6
---+---+---
7 | 8 | 9

Cada jugador (el de la X y el O) realiza una jugada, indicando en que casilla
de la matriz desea colocar su ficha, y gana el que realice una tripleta

En la primera línea se darán los números de casos de prueba, en las siguientes
números del 1 al 9 indicando las casillas de la matriz, siempre comenzando por
el jugador de la ficha X, es decir las jugadas pares es X y las impares O.

Se debe responder en que numero de jugada algún jugador gano o si fue empate
contestar con 0

Ejemplo:

    input data:
        3
        7 5 4 1 9 2 8 3 6
        5 1 3 7 6 4 2 9 8
        5 1 2 8 6 4 7 3 9

    answer:
        7 6 0

= Solución

Se crea una matriz de 3*3 y se inicializa en 0 para indicar vacío, se tomaron
los valores 1 para las fichas X y 2 para las fichas O.

[source,java]
----
public static void inicialize(int matrix[][])
{
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++){
            matrix[i][j] = 0;
        }
    }
}
----

Luego se lee cada movimiento de los jugadores y se coloca en la casilla.
correspondiente

[source,java]
----
switch (move)
{
    case 1:
        //00
        matrix[0][0]=player;
        break;
    case 2:
        //01
        matrix[0][1]=player;

        break;
    case 3:
        //02
        matrix[0][2]=player;
        break;
    case 4:
        //10
        matrix[1][0]=player;
        break;
    case 5:
        //11
        matrix[1][1]=player;
        break;
    case 6:
        //12
        matrix[1][2]=player;
        break;
    case 7:
        //20
        matrix[2][0]=player;
        break;
    case 8:
        //21
        matrix[2][1]=player;
        break;
    case 9:
        //22
        matrix[2][2]=player;
        break;
}
----

Para luego verificar si ha habido una jugada ganadora.

[source,java]
----
public static boolean checkWin(int matrix[][]){

    if(
            (matrix[0][0]!=0 && matrix[1][0] == matrix[0][0] && matrix[2][0]==matrix[0][0]) ||

                    (matrix[0][0]!=0 && matrix[0][1] == matrix[0][0] && matrix[0][2]==matrix[0][0]) ||

                    (matrix[0][0]!=0 && matrix[1][1] == matrix[0][0] && matrix[2][2]==matrix[0][0]) ||

                    (matrix[2][2]!=0 && matrix[2][1] == matrix[2][2] && matrix[2][0]==matrix[2][2]) ||

                    (matrix[2][2]!=0 && matrix[1][2] == matrix[2][2] && matrix[0][2]==matrix[2][2]) ||

                    (matrix[2][0]!=0 && matrix[1][1] == matrix[2][0] && matrix[0][2]==matrix[2][0])
                    ||
                    (matrix[1][0]!=0 && matrix[1][1] == matrix[1][0] && matrix[1][2]==matrix[1][0])
            ){
        return true;
    }

    return false;
}
----
