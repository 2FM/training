Regular Expressions
A regular expression, also called regex, is a secuence of characters that becomes a pattern to search with. Mainly used for patterns of characters search or substitution operations.

Basics of Regular Expressions
? The question mark means that the character is optional. i.e: a? meaning that in the regular expresion a could appear or not.
+ The plus sign indicates one or more occurrences of the character. i.e: a+ meaning that a needs to appear at least once but can be repeated. "aaa" "a" "aaaaaaaa".
* The asterisk indicates zero or more ocurrences of the character. Same example than with the plus sign with the difference that the regex could be empty " ^$".
| The pipe operator has the same behavior than an "or" in logic expressions. Meaning either a character or another. ie. "a|b" so the regex might be "a" or "b".
\ The backslash makes a function of escape for the following character.

Challenge description:
The challenge required us to accept a type of pattern and look into the rest of the given line if there's any filename(string) that fits with the pattern given.

Challenge solution:


import re
import sys

First import the regex module for working with regular expressions an then the system module to read the file,

with open(sys.argv[1], 'r') as test_cases:
    for test in test_cases:
Using the system module read the file and put it into test_cases. Then iterate over every item, in this case we will call it test, to get every line in the file.
        test = test.strip()
Here we cut both spaces at the begining and the end of the line.
        pattern = test.split(" ")[0]
        line = test.split(" ")[1::]
Now we get the pattern requested to compare with the rest of the line that means .  
        pattern = re.sub(r"\.", r"\.", pattern)
        pattern = re.sub(r"\*", ".*", pattern)
        pattern = re.sub(r"\?", ".", pattern)
Now the problem gives us a few instructions of what means in the regular expression, the point "." means any character, so we replace the points with the escaped point so it will get the point as string. Then we should replace every asterisk as the regular expression ".*" so it will get every item repeated zero or more times. Then replace the question mark with a point without backslash with a point that means any character.
        pattern = pattern.replace(pattern, pattern+"$")
Now treat the pattern as string and add the "$" meaning the end of the line, nothing can be after the "$".
        solutions = []
Create a list with the posible solutions we could get evaluating the pattern.
        for item in line:
            if re.match(pattern, item):
                solutions.append(item)
Now iterate over every item in line so we can check if that string fits with the description given by the pattern. So if the string fullfill the pattern instructions take the string to the list solutions.
        if len(solutions) != 0:
            print " ".join(solutions)
        else:
            print "-"
Now just checking if there's anything in the solutions list, if there's something then print it with a single space split in case there's more than one, and if there's nothing means no string could fit in the pattern description so print "-".
Pylint Fancyness code test
Report
======
18 statements analysed.

Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |1      |1          |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|class    |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+
|method   |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+
|function |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+



Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |20     |90.91 |20       |=          |
+----------+-------+------+---------+-----------+
|docstring |1      |4.55  |1        |=          |
+----------+-------+------+---------+-----------+
|comment   |0      |0.00  |0        |=          |
+----------+-------+------+---------+-----------+
|empty     |1      |4.55  |1        |=          |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |=          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |0      |0        |=          |
+-----------+-------+---------+-----------+
|refactor   |0      |0        |=          |
+-----------+-------+---------+-----------+
|warning    |0      |0        |=          |
+-----------+-------+---------+-----------+
|error      |0      |0        |=          |
+-----------+-------+---------+-----------+



Global evaluation
-----------------
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)
